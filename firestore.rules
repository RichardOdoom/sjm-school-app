
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    function isAdmin() {
      return isAuthenticated() && request.auth.token.isAdmin == true;
    }

    // Students Collection
    // Admins can manage all student records.
    // Teachers can read student records for classes they are assigned to (more complex, usually done via backend/functions).
    // Students can read their own record (requires client to query by studentId, not directly via auth.uid here).
    match /students/{studentId} {
      allow read: if isAuthenticated(); // Broad read for authenticated users, can be tightened
      allow create, update, delete: if isAdmin();
      // Example for teachers reading students in their assigned class (requires teacher doc lookup - advanced)
      // allow read: if isAuthenticated() && exists(/databases/$(database)/documents/teachers/$(request.auth.uid)) &&
      //                get(/databases/$(database)/documents/teachers/$(request.auth.uid)).data.assignedClasses.hasAny([resource.data.gradeLevel]);
    }

    // Teachers Collection
    // Admins can manage all teacher records.
    // Teachers can read and update their own profile.
    match /teachers/{teacherId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin(); // Only admins can register new teachers
      allow update: if isAdmin() || (isAuthenticated() && request.auth.uid == teacherId
                                  // Prevent teacher from changing their own UID or email directly in this document if it's key for auth mapping
                                  && request.resource.data.uid == resource.data.uid
                                  && request.resource.data.email == resource.data.email);
      allow delete: if isAdmin();
    }

    // Payments Collection
    // Admins can manage all payments.
    // Teachers might read payments for their students (complex rule or backend).
    // Students read their own payments (client queries by studentId).
    match /payments/{paymentId} {
      allow read: if isAuthenticated(); // Broad read for authenticated users; specific student/teacher views need client-side filtering or backend logic.
      allow create, update, delete: if isAdmin();
    }

    // Attendance Entries Collection
    // Teachers can create/update attendance for their students.
    // Admins can manage all.
    // Students read their own.
    match /attendanceEntries/{entryId} {
      allow read: if isAuthenticated() && (resource.data.studentId == request.auth.token.studentId_for_rules || resource.data.markedByTeacherId == request.auth.uid || isAdmin());
                     // studentId_for_rules would be a custom claim if students used Firebase Auth.
                     // For student ID login, client queries for studentId.
                     // Teacher can read entries they marked.
      allow create: if isAuthenticated() && request.resource.data.markedByTeacherId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.markedByTeacherId == request.auth.uid
                      && request.resource.data.markedByTeacherId == request.auth.uid // Cannot change marker
                      && request.resource.data.studentId == resource.data.studentId; // Cannot change student
      allow delete: if isAuthenticated() && resource.data.markedByTeacherId == request.auth.uid;
      allow list: if isAdmin(); // Or more specific rules for teachers/students listing their own
    }

    // Assignments Collection
    // Teachers can manage assignments for their classes.
    // Students can read assignments for their class.
    match /assignments/{assignmentId} {
      allow read: if isAuthenticated(); // Students/teachers will filter on client/backend
      allow create: if isAuthenticated() && request.resource.data.teacherId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.teacherId == request.auth.uid
                      && request.resource.data.teacherId == request.auth.uid; // Cannot change owner
      allow delete: if isAuthenticated() && resource.data.teacherId == request.auth.uid;
    }

    // Behavior Incidents Collection
    match /behaviorIncidents/{incidentId} {
      allow read: if isAuthenticated(); // Students/teachers will filter on client/backend
      allow create: if isAuthenticated() && request.resource.data.teacherId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.teacherId == request.auth.uid
                      && request.resource.data.teacherId == request.auth.uid; // Cannot change reporter
      allow delete: if isAuthenticated() && resource.data.teacherId == request.auth.uid;
    }

    // Timetable Entries Collection
    match /timetableEntries/{entryId} {
      // Helper to check if the document ID matches the expected format for the user
      function isCorrectDocIdFormat() {
        return entryId.startsWith(request.auth.uid + '_');
      }
      // Helper to check if the document data's teacherId matches the authenticated user
      function isDocumentOwner(docData) {
        return docData.teacherId == request.auth.uid;
      }

      allow read: if isAuthenticated()
                  && isDocumentOwner(resource.data)
                  && isCorrectDocIdFormat();

      allow create: if isAuthenticated()
                    && isDocumentOwner(request.resource.data) // teacherId in new data must be current user
                    && isCorrectDocIdFormat()
                    // Ensure all necessary fields are provided on create and teacherId is correct
                    && request.resource.data.keys().hasAll(['teacherId', 'dayOfWeek', 'periods', 'createdAt', 'updatedAt'])
                    && request.resource.data.teacherId == request.auth.uid // Redundant but explicit
                    && request.resource.data.createdAt == request.time // Server timestamp for creation
                    && request.resource.data.updatedAt == request.time; // Server timestamp for update

      allow update: if isAuthenticated()
                    && isDocumentOwner(resource.data)             // Existing doc must be owned by user
                    && isDocumentOwner(request.resource.data)     // New data must also claim user as owner
                    && isCorrectDocIdFormat()
                    // Prevent changing the original teacherId or createdAt timestamp
                    && request.resource.data.teacherId == resource.data.teacherId
                    && !(request.resource.data.keys().has('createdAt')) // createdAt cannot be changed
                    && request.resource.data.updatedAt == request.time; // Server timestamp for update

      allow delete: if isAuthenticated()
                    && isDocumentOwner(resource.data)
                    && isCorrectDocIdFormat();
    }

    // App Settings Collection
    // Only admins can read/write general app settings.
    match /appSettings/{settingId} {
      allow read, write: if isAdmin();
    }
  }
}

    