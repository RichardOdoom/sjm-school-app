
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      // This assumes you have a custom claim 'isAdmin' set to true for admin users.
      // You need to set this claim via Firebase Admin SDK or manually in Firebase Console.
      return isAuthenticated() && request.auth.token.isAdmin == true;
    }

    // Rules for 'teachers' collection
    match /teachers/{teacherId} {
      allow read: if isAuthenticated(); // Admins can read any, teachers can read their own profile.
      allow create: if isAdmin();       // Only admins can create teacher profiles.
      allow update: if isAdmin() || (isAuthenticated() && teacherId == request.auth.uid); // Admins or the teacher themselves.
      allow delete: if isAdmin();       // Only admins can delete.
      // Further validation can be added:
      // - Ensure role is 'teacher' and cannot be changed by non-admins.
      // - Ensure email matches auth email (if stored) and cannot be changed by non-admins.
      // - UID in document must match document ID.
    }

    // Rules for 'students' collection
    match /students/{studentId} {
      allow read: if isAuthenticated(); // Admins and teachers can read.
                                      // Students viewing their own data is typically handled by client-side queries for their ID.
      allow create: if isAdmin();       // Only admins can register students.
      allow update: if isAdmin();       // Only admins can update student main details.
      allow delete: if isAdmin();       // Only admins can delete.
      // Further validation:
      // - studentId in document must match documentId.
    }

    // Rules for 'payments' collection
    match /payments/{paymentId} {
      // Admins can read all. Teachers/students might need specific access.
      allow read: if isAdmin() || (isAuthenticated() && resource.data.studentId != null); // Example: Authenticated users can read if studentId exists.
                                                                                    // More granular student/teacher access would need checking against their IDs/class lists.
      allow create: if isAdmin();   // Only admins can record payments.
      allow update, delete: if isAdmin(); // Typically payments are immutable or admin-only for changes.
    }

    // Rules for 'attendanceEntries' collection
    match /attendanceEntries/{entryId} {
      allow read: if isAdmin() ||
                     (isAuthenticated() && resource.data.markedByTeacherId == request.auth.uid) || // Teacher can read their own marks
                     (isAuthenticated() && resource.data.studentId != null); // Students can read their own attendance (client queries by studentId)
      allow create, update: if isAuthenticated() &&
                               request.resource.data.markedByTeacherId == request.auth.uid; // Teacher marks for their students.
      allow delete: if isAuthenticated() &&
                       resource.data.markedByTeacherId == request.auth.uid; // Teacher can delete their own entries.
      // Ensure 'date' is a timestamp, 'status' is valid, etc.
    }

    // Rules for 'assignments' collection
    match /assignments/{assignmentId} {
      allow read: if isAuthenticated(); // All authenticated users can read assignments (e.g. students in class).
      allow create: if isAuthenticated() &&
                       request.resource.data.teacherId == request.auth.uid; // Teacher creates for their class.
      allow update, delete: if isAuthenticated() &&
                               resource.data.teacherId == request.auth.uid; // Teacher manages their own assignments.
    }

    // Rules for 'behaviorIncidents' collection
    match /behaviorIncidents/{incidentId} {
      allow read: if isAdmin() ||
                     (isAuthenticated() && resource.data.teacherId == request.auth.uid) || // Teacher sees incidents they logged or for their students
                     (isAuthenticated() && resource.data.studentId != null); // Student sees their own incidents
      allow create: if isAuthenticated() &&
                       request.resource.data.teacherId == request.auth.uid;
      allow update, delete: if isAuthenticated() &&
                               resource.data.teacherId == request.auth.uid;
    }

    // Helper: Is the requesting user the owner of the timetable entry?
    function isTimetableOwner(docData) {
      return isAuthenticated() &&
             docData.keys().hasAll(['teacherId']) &&
             docData.teacherId is string &&
             docData.teacherId == request.auth.uid;
    }

    // Helper: Validate the structure of the 'periods' array for timetable entries
    function isValidPeriodsArray(periods) {
      return periods is list &&
             (periods.size() == 0 || periods.all(p,
               p.keys().hasAll(['startTime', 'endTime', 'subjects', 'classNames']) &&
               p.startTime is string && p.startTime.matches('^([01]?[0-9]|2[0-3]):[0-5][0-9]$') &&
               p.endTime is string && p.endTime.matches('^([01]?[0-9]|2[0-3]):[0-5][0-9]$') &&
               p.subjects is list && (p.subjects.size() == 0 || p.subjects.all(s, s is string)) &&
               p.classNames is list && (p.classNames.size() == 0 || p.classNames.all(c, c is string))
             ));
    }

    match /timetableEntries/{entryId} {
      // Allow read if the document's teacherId matches the authenticated user's UID.
      // This rule applies to both get() and list() (queries).
      // For list(), Firestore checks if this rule would pass for ALL documents that *could* be returned by the query
      // before applying the query's where filters.
      allow read: if isAuthenticated() &&
                     resource.data.teacherId == request.auth.uid;

      allow create: if isAuthenticated() &&
                       request.resource.data.teacherId == request.auth.uid && // Creator is owner
                       entryId.startsWith(request.auth.uid + '_') &&         // Doc ID format check
                       request.resource.data.dayOfWeek is string &&
                       request.resource.data.dayOfWeek.size() > 0 &&
                       request.resource.data.periods is list &&
                       isValidPeriodsArray(request.resource.data.periods) &&
                       request.resource.data.createdAt == request.time &&    // Timestamps on create
                       request.resource.data.updatedAt == request.time;

      allow update: if isAuthenticated() &&
                       resource.data.teacherId == request.auth.uid && // Original owner
                       request.resource.data.teacherId == resource.data.teacherId && // teacherId cannot change
                       entryId.startsWith(request.auth.uid + '_') &&         // Doc ID format check
                       request.resource.data.dayOfWeek is string &&
                       request.resource.data.dayOfWeek == resource.data.dayOfWeek && // dayOfWeek cannot change
                       request.resource.data.periods is list &&
                       isValidPeriodsArray(request.resource.data.periods) &&
                       request.resource.data.keys().hasAll(['teacherId', 'dayOfWeek', 'periods', 'updatedAt']) &&
                       !request.resource.data.keys().hasAny(['createdAt']) && // createdAt cannot be updated
                       request.resource.data.updatedAt == request.time;        // Server timestamp on update

      allow delete: if isAuthenticated() &&
                       resource.data.teacherId == request.auth.uid && // Original owner
                       entryId.startsWith(request.auth.uid + '_');    // Doc ID format check
    }

    // Application Settings
    match /appSettings/general {
      allow read: if true; // Publicly readable for branding, copyright year, etc.
      allow write: if isAdmin(); // Only admins can write general settings.
    }

    // Catch-all for any other appSettings documents (if any) - admin only
    match /appSettings/{otherSettingId} {
        allow read, write: if isAdmin();
    }
  }
}

    