
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin() {
      // IMPORTANT: For this to work, the authenticated user's ID token MUST have a custom claim named 'isAdmin'
      // and its value MUST be the boolean true.
      // Verify this in your Firebase project for the admin user account.
      // If the claim is missing, false, or a string "true", this function will return false.
      return request.auth != null && request.auth.token.isAdmin == true;
    }

    function isTeacher() {
      // Assumes a 'teachers' collection where each document ID is the teacher's UID.
      return request.auth != null && exists(/databases/$(database)/documents/teachers/$(request.auth.uid));
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // ---- Rules for Student Creation ----
    match /students/{studentDocId} {
      // Admin can create students.
      // Requirement 1: The user performing the request must be an admin (isAdmin() == true).
      // Requirement 2: The 'studentId' field within the new document's data must match the document's ID.
      //                Your client-side code (RegisterStudentPage) correctly sets this up.
      // If this rule fails, THE MOST LIKELY CAUSE IS THE `isAdmin()` CONDITION NOT BEING MET.
      // Double-check that your logged-in admin user has the `isAdmin: true` (boolean) custom claim.
      allow create: if isAdmin() && request.resource.data.studentId == studentDocId;

      // Admins can read, update, and delete any student.
      allow read, update, delete: if isAdmin();

      // Teachers can read students if the student's gradeLevel is in the teacher's assignedClasses array.
      allow read: if isTeacher() &&
                    get(/databases/$(database)/documents/teachers/$(request.auth.uid)).data.assignedClasses.hasAny([resource.data.gradeLevel]);
      
      // Students (unauthenticated via Firebase Auth in this context) can read their own profile.
      // This rule relies on the client fetching the correct studentDocId.
      // This is permissive and might be refined in a production app with student auth or backend proxy.
      allow read: if request.auth == null; 
    }

    // ---- Rules for Teacher Creation/Management ----
    match /teachers/{teacherId} {
      // Admins can create teacher profiles (document ID should be teacher's auth UID).
      // Teacher profile should contain 'uid' field matching their auth UID.
      allow create: if isAdmin() && request.resource.data.uid == teacherId;

      // Admins can read, update, delete any teacher.
      allow read, update, delete: if isAdmin();

      // Teachers can read and update their own profile.
      allow read, update: if isOwner(teacherId);
    }

    // ---- Rules for Teacher Subcollections (Settings, Timetable, etc.) ----
    match /teachers/{teacherId}/{subcollection}/{docId} {
      // Teachers can manage their own subcollection documents.
      allow read, write, delete: if isOwner(teacherId);
      // Admins can also manage these for administrative purposes.
      allow read, write, delete: if isAdmin();
    }


    // ---- Rules for Admin-managed App Settings ----
    match /appSettings/{settingId} {
      // Admins can read and write global app settings.
      allow read, write: if isAdmin();
      // Allow all authenticated users (teachers, potentially students if app structure requires) to read settings.
      // Or make it public if needed for homepage branding.
      allow read: if request.auth != null || request.auth == null; // Public read for settings like school name
    }

    // ---- Rules for Fee Payments ----
    match /payments/{paymentId} {
      // Admins can create, read, update, delete payments.
      allow read, write, delete: if isAdmin();
      // Students (unauthenticated) can read their own payments if rules are structured to allow this.
      // For student ID based login, reading specific payment would require client to know paymentId.
      // Listing payments for a student needs query rules, generally:
      // allow list: if request.auth == null && request.query.studentId == ??? (difficult without auth)
      // For now, allow admins to list/read. Students access through a summarized view page (MyFees)
      // which should ideally be backend-driven or use more specific read rules if client fetches directly.
    }

    // ---- Rules for Announcements (example, if stored in Firestore) ----
    // If announcements are primarily local storage for now, these rules are less critical.
    // If migrating to Firestore:
    match /announcements/{announcementId} {
      allow create, update, delete: if isAdmin(); // Admins manage announcements
      allow read: if true; // All users (including unauth for public announcements) can read
    }

    // ---- Rules for Assignments ----
    match /assignments/{assignmentId} {
      // Teachers can create assignments for their teacherId.
      allow create: if isTeacher() && request.resource.data.teacherId == request.auth.uid;
      // Teachers can read, update, delete their own assignments.
      allow read, update, delete: if isTeacher() && resource.data.teacherId == request.auth.uid;
      // Admins can read, update, delete any assignment.
      allow read, update, delete: if isAdmin();
      // Students can read assignments for their classId (gradeLevel).
      // This relies on client querying by classId.
      // allow read: if request.auth == null; // If students access unauthenticated
    }
    
    // ---- Rules for Assignment Submissions ----
    match /assignmentSubmissions/{submissionId} {
        // Students (if they had auth) could create/update their own.
        // Teachers can read submissions for their assignments/students.
        // Teachers can update (grade) submissions.
        allow read, write: if isTeacher(); // Simplified: teachers can manage submissions.
        allow read, write, delete: if isAdmin();
    }

    // ---- Rules for Behavior Incidents ----
    match /behaviorIncidents/{incidentId} {
      // Teachers can create incidents for their teacherId.
      allow create: if isTeacher() && request.resource.data.teacherId == request.auth.uid;
      // Teachers can read, update, delete incidents they created.
      allow read, update, delete: if isTeacher() && resource.data.teacherId == request.auth.uid;
      // Admins can manage any behavior incident.
      allow read, update, delete: if isAdmin();
    }

    // ---- Rules for Attendance Entries ----
    match /attendanceEntries/{entryId} { // entryId might be studentId_date
      // Teachers can create/update attendance for students.
      // This rule is broad; ideally, check if teacher is assigned to the student's class.
      allow create, update: if isTeacher() && request.resource.data.markedByTeacherId == request.auth.uid;
      allow read, delete: if isTeacher() && resource.data.markedByTeacherId == request.auth.uid;
      // Admins can manage any attendance entry.
      allow read, write, delete: if isAdmin();
      // Students can read their own attendance. entryId would need to match studentId_date.
      // Example: allow read: if request.auth == null && entryId.startsWith(???); // Needs client to construct entryId for query
    }
    
    // ---- Rules for Timetable Entries ----
    match /timetableEntries/{entryId} { // entryId might be teacherId_dayOfWeek
        allow create, update, delete: if isTeacher() && request.resource.data.teacherId == request.auth.uid; // Teacher manages their own timetable
        allow read: if isTeacher() && resource.data.teacherId == request.auth.uid; // Teacher can read their own
        allow read, write, delete: if isAdmin(); // Admin can manage any
        // Students need to read timetable entries for their class.
        // This is typically done by querying the collection and filtering client-side,
        // or by having a specific "published_timetables" collection.
        // For direct reads from this collection by students (if unauthenticated):
        allow read: if request.auth == null; // Or more specific if possible
    }

    // ---- Rules for Student Preferences ----
    match /studentPreferences/{studentDocId} {
      // IMPORTANT: This rule is PERMISSIVE because students currently log in via ID and don't have Firebase Auth.
      // This means any client that knows a student's ID could theoretically read/write their preferences.
      // For a production app with sensitive student data, a more secure mechanism (Firebase Auth for students
      // or backend-mediated writes) would be necessary.
      allow read, write: if true;
      // A slightly more restrictive version (still not fully secure without auth):
      // allow create: if request.resource.data.studentId == studentDocId;
      // allow read, update, delete: if resource.data.studentId == studentDocId;
      // (This requires adding a studentId field within the document itself)
    }

    // ---- Rules for Academic Results ----
    match /academicResults/{resultId} {
        // Teachers can create results.
        allow create: if isTeacher() && request.resource.data.teacherId == request.auth.uid;
        // Teachers can read, update, delete results they created.
        allow read, update, delete: if isTeacher() && resource.data.teacherId == request.auth.uid;
        // Admins can manage any academic result.
        allow read, write, delete: if isAdmin();
        // Students can read their own results.
        // This relies on client querying for results where studentId field matches logged-in student.
        // It's assumed the client-side fee check has already happened.
        allow read: if request.auth == null; // Or based on studentId field if students were authenticated: resource.data.studentId == request.auth.uid
    }

  }
}

    