rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && request.auth.token.isAdmin == true;
    }

    function isTeacher() {
      return isAuthenticated() && exists(/databases/$(database)/documents/teachers/$(request.auth.uid));
    }

    // --- App Settings ---
    match /appSettings/{settingId} {
      allow read: if true; // All roles can read general app settings
      allow write: if isAdmin(); // Only admins can change settings
    }

    // --- Students ---
    match /students/{studentId} {
      allow read: if isAdmin() || isTeacher() || request.auth == null; // Admins, Teachers. Students read via ID, no Firebase Auth for students yet.
      allow create, update, delete: if isAdmin(); // Only admins can manage student records
    }

    // --- Teachers ---
    match /teachers/{teacherId} {
      allow read: if isAdmin() || isTeacher(); // Admins and teachers can read teacher profiles
      allow create: if isAdmin(); // Only admins can register new teachers
      allow update: if isAdmin() || (isTeacher() && isUser(teacherId)); // Admins or teacher updating own profile
      allow delete: if isAdmin(); // Only admins can delete teachers
    }

    // --- Fee Structure (if migrated from localStorage) ---
    // Assuming a collection 'feeStructure' with documents per fee item
    match /feeStructure/{feeItemId} {
      allow read: if true; // All roles can read fee structure
      allow write: if isAdmin(); // Only admins manage fee structure
    }

    // --- Payments ---
    match /payments/{paymentId} {
      allow read: if isAdmin() || request.auth == null; // Admins can read. Students read by ID via client.
      allow create, update, delete: if isAdmin(); // Only admins manage payments
    }

    // --- Announcements (if migrated from localStorage) ---
    match /announcements/{announcementId} {
      allow read: if true; // All roles can read announcements
      allow write: if isAdmin(); // Only admins manage announcements
    }

    // --- Attendance Entries ---
    match /attendanceEntries/{entryId} {
      allow read: if isAdmin() || isTeacher() || request.auth == null; // Admins, Teachers. Students by ID.
      allow create, update: if isTeacher(); // Teachers manage attendance
      allow delete: if isAdmin(); // Admins can delete specific entries if needed
    }

    // --- Assignments ---
    match /assignments/{assignmentId} {
      allow read: if isAdmin() || isTeacher() || request.auth == null; // Admins, Teachers, Students (filtered by class client-side)
      allow create, update, delete: if isTeacher() && request.resource.data.teacherId == request.auth.uid; // Teachers manage their own assignments
    }

    // --- Assignment Submissions ---
    match /assignmentSubmissions/{submissionId} {
      // Students can create submissions for assignments in their class.
      // Students can read their own submissions.
      // Teachers can read submissions for their assignments/classes.
      // Teachers can update (grade/feedback) submissions for their assignments.
      allow create: if request.auth == null; // Students are unauthenticated, relies on client passing correct studentId
      allow read: if isAdmin() || isTeacher() || request.auth == null;
      allow update: if isTeacher(); // Teachers grade submissions
      allow delete: if isAdmin() || (isTeacher() && resource.data.teacherId == request.auth.uid);
    }

    // --- Behavior Incidents ---
    match /behaviorIncidents/{incidentId} {
      allow read: if isAdmin() || isTeacher();
      allow create, update, delete: if isTeacher() && request.resource.data.teacherId == request.auth.uid; // Teachers manage incidents they log
    }

    // --- Lesson Plans (AI Generated) ---
    match /lessonPlans/{lessonPlanId} {
      // Assuming lesson plans are private to the teacher who generated them
      allow read, create, update, delete: if isTeacher() && request.auth.uid == resource.data.teacherId;
      allow read: if isAdmin(); // Admins might need oversight
    }

    // --- Timetable Entries ---
    match /timetableEntries/{entryId} {
      allow read: if true; // All roles can read (students filter client-side for their class)
      allow create, update, delete: if isTeacher() && request.resource.data.teacherId == request.auth.uid; // Teachers manage their own timetable
    }

    // --- Student Preferences ---
    match /studentPreferences/{studentDocId} {
      // This rule is permissive because students don't have Firebase Auth.
      // Relies on client-side logic to use the correct studentDocId.
      allow read, write: if true;
    }

    // --- Academic Results (NEW) ---
    match /academicResults/{resultId} {
      allow read: if isAdmin() || isTeacher() || request.auth == null; // Admins, Teachers. Students read by ID if fees paid (client logic).
      // Teachers can create/update/delete results for students in their assigned classes.
      // More specific checks could be added if student's class is part of the result document
      // and can be cross-referenced with teacher's assignedClasses custom claim or teacher document.
      allow create, update, delete: if isTeacher();
      // To be more secure for update/delete:
      // allow update, delete: if isTeacher() && resource.data.teacherId == request.auth.uid;
    }

    // --- Teachers Subcollections (e.g., userSettings) ---
    match /teachers/{teacherId}/userSettings/{settingsDocId} {
        allow read, write: if isUser(teacherId); // Teacher can manage their own settings
        allow read: if isAdmin(); // Admin can read teacher settings
    }

  }
}