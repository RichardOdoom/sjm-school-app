
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      return request.auth != null && request.auth.token.isAdmin == true;
    }

    function isTeacher() {
      return request.auth != null && exists(/databases/$(database)/documents/teachers/$(request.auth.uid));
    }

    function isOwner(resourceUserId) {
      return request.auth != null && request.auth.uid == resourceUserId;
    }

    // Path: /students/{studentId}
    match /students/{studentId} {
      // Admins can create student records if the document ID matches the studentId field in the data
      allow create: if isAdmin() && request.resource.data.studentId == studentId;
      // Admins can read, update, and delete any student record
      allow read, update, delete: if isAdmin();

      // Teachers can read students (client-side should filter by assignedClass if needed)
      allow read: if isTeacher();

      // Students (unauthenticated for this purpose) can get their own profile by ID for login/profile display
      allow get: if request.auth == null;
    }

    // Path: /teachers/{teacherId}
    match /teachers/{teacherId} {
      // Admins can create, read, update, delete any teacher
      allow read, write: if isAdmin(); // Covers create, update, delete

      // Teachers can read and update their own profile
      allow get, update: if isOwner(teacherId);
    }
    
    // Path: /teachers/{teacherId}/userSettings/preferences
    match /teachers/{teacherId}/userSettings/preferences {
      allow read, write: if isOwner(teacherId);
    }

    // Path: /appSettings/general
    match /appSettings/{docId} { // docId will typically be 'general'
      // Admins can read and write general app settings
      allow read, write: if isAdmin();
      // Allow anyone to read general app settings (e.g., for school name on public pages)
      allow get: if request.auth == null || request.auth != null;
    }

    // Path: /payments/{paymentId}
    match /payments/{paymentId} {
      // Admins can create and read all payments
      allow create, read: if isAdmin();
      // Students can read their own payments (requires studentId field in payment doc)
      allow read: if request.auth == null && resource.data.studentId != null; // studentId must be checked client-side
    }
    
    // Path: /attendanceEntries/{entryId} (entryId might be studentId_date)
    match /attendanceEntries/{entryId} {
        // Teachers can create, read, update their own attendance entries
        allow create, read, update: if isTeacher() && request.resource.data.markedByTeacherId == request.auth.uid; 
        allow read: if isTeacher() && resource.data.markedByTeacherId == request.auth.uid;
        
        // Students can read their own attendance (requires studentId in entry)
        allow read: if request.auth == null && resource.data.studentId != null; // Student ID checked client-side

        // Admins can read all entries
        allow read: if isAdmin();
    }

    // Path: /assignments/{assignmentId}
    match /assignments/{assignmentId} {
        // Teachers can create, read, update, delete assignments they own
        allow create: if isTeacher() && request.resource.data.teacherId == request.auth.uid;
        allow read, update, delete: if isTeacher() && resource.data.teacherId == request.auth.uid;

        // Students can read assignments for their class (requires classId in assignment doc)
        // This is simplified; a more robust solution might involve checking student's class against assignment's classId
        allow read: if request.auth == null; // Students are unauthenticated for this

        // Admins can read all assignments
        allow read: if isAdmin();
    }

    // Path: /assignmentSubmissions/{submissionId}
    match /assignmentSubmissions/{submissionId} {
        // Students can create their own submissions
        // allow create: if request.auth == null && request.resource.data.studentId != null; // Needs student ID verification

        // Teachers can read/update submissions for their assignments
        // (More complex: check if assignment teacherId matches current teacher)
        // For now, allow teachers to read/update generally, client-side should enforce logic.
        allow read, update: if isTeacher(); // Simplified for now

        // Admins can read submissions
        allow read: if isAdmin();
    }
    
    // Path: /behaviorIncidents/{incidentId}
    match /behaviorIncidents/{incidentId} {
        // Teachers can create, read, update, delete incidents they logged
        allow create: if isTeacher() && request.resource.data.teacherId == request.auth.uid;
        allow read, update, delete: if isTeacher() && resource.data.teacherId == request.auth.uid;
        
        // Admins can read all incidents
        allow read: if isAdmin();
    }

    // Path: /timetableEntries/{entryId} (entryId might be teacherId_dayOfWeek)
    match /timetableEntries/{entryId} {
        // Teachers can CRUD their own timetable entries
        allow create: if isTeacher() && request.resource.data.teacherId == request.auth.uid;
        allow read, update, delete: if isTeacher() && resource.data.teacherId == request.auth.uid;

        // Students can read timetable entries (client-side filters for their class)
        allow read: if request.auth == null;

        // Admins can read all timetable entries
        allow read: if isAdmin();
    }
    
    // Path: /academicResults/{resultId}
    match /academicResults/{resultId} {
        // Teachers can create, read, update, delete results they recorded
        allow create: if isTeacher() && request.resource.data.teacherId == request.auth.uid;
        allow read, update, delete: if isTeacher() && resource.data.teacherId == request.auth.uid;

        // Students can read their own results (client-side still gatekeeps based on fees)
        allow read: if request.auth == null && resource.data.studentId != null;

        // Admins can read all results
        allow read: if isAdmin();
    }

    // Path: /studentPreferences/{studentDocId}
    // This rule is permissive because students don't have Firebase Auth.
    // Client-side logic fetches based on locally stored student ID.
    // For higher security, student Firebase Auth or backend-mediated writes would be needed.
    match /studentPreferences/{studentDocId} {
      allow read, write: if true;
    }

  }
}
