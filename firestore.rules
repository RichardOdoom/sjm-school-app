
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Admin role check based on custom claim 'isAdmin' being true
    function isAdmin() {
      return isAuthenticated() && request.auth.token.isAdmin == true;
    }

    // --- Students Collection (/students/{studentId}) ---
    // studentId is the 10-digit ID, and also the document ID.
    match /students/{studentId} {
      allow read: if isAuthenticated(); // Teachers and Admins can read student profiles.
                                        // Students read their own profile via specific queries/server actions.
      allow create: if isAdmin() && request.resource.data.studentId == studentId; // Only Admins can register. Ensure ID matches.
      allow update: if isAdmin();       // Only Admins can update student details.
      allow delete: if isAdmin();       // Only Admins can delete student records.
    }

    // --- Teachers Collection (/teachers/{teacherId}) ---
    // teacherId is the Firebase Auth UID.
    match /teachers/{teacherId} {
      allow read: if isAuthenticated();     // All authenticated users (admins, other teachers) can read basic teacher profiles.
      allow create: if isAdmin() && request.resource.data.uid == teacherId && request.resource.data.role == "teacher"; // Only Admins can register new teachers.
      allow update: if (isUser(teacherId) || isAdmin()) && request.resource.data.uid == teacherId && request.resource.data.email == resource.data.email; // Teacher can update own, Admin can update any. Email/UID immutable.
      allow delete: if isAdmin();           // Only Admins can delete teacher records.
    }

    // --- Payments Collection (/payments/{paymentId}) ---
    match /payments/{paymentId} {
      // Admins can read all. Teachers might read for their students (query based). Students read their own (query based).
      allow read: if isAuthenticated();
      allow create: if isAdmin();       // Only Admins can record payments.
      allow update: if isAdmin();       // Admins can correct/update payments.
      allow delete: if isAdmin();       // Admins can delete payments.
    }

    // --- Announcements Collection (/announcements/{announcementId}) ---
    // (Assuming migration from localStorage)
    match /announcements/{announcementId} {
      allow read: if true; // Publicly readable
      allow create, update, delete: if isAdmin(); // Only Admins manage announcements.
    }

    // --- App Settings (/appSettings/general) ---
    match /appSettings/general {
      allow read: if true; // Publicly readable
      allow write: if isAdmin(); // Only Admins can change app settings.
    }

    // --- Attendance Entries (/attendanceEntries/{entryId}) ---
    // entryId is "{studentId}_{YYYY-MM-DD}"
    match /attendanceEntries/{entryId} {
      function isAttendanceSubmitter() {
        return isAuthenticated() && request.resource.data.markedByTeacherId == request.auth.uid;
      }
      function isAttendanceOwner() {
        return isAuthenticated() && resource.data.markedByTeacherId == request.auth.uid;
      }
      function isValidAttendanceData() {
        return request.resource.data.studentId is string &&
               request.resource.data.studentName is string &&
               request.resource.data.className is string &&
               request.resource.data.date is timestamp &&
               request.resource.data.status in ['present', 'absent', 'late'] &&
               request.resource.data.markedByTeacherId is string &&
               request.resource.data.markedByTeacherName is string &&
               request.resource.data.lastUpdatedAt == request.time;
      }

      // Teachers can read entries they created. Admins can read all. Students query for their own.
      allow read: if isAuthenticated() && (isAdmin() || (resource.data.keys().has('markedByTeacherId') && resource.data.markedByTeacherId == request.auth.uid));

      allow create: if isAttendanceSubmitter() &&
                      entryId.startsWith(request.resource.data.studentId + '_') &&
                      isValidAttendanceData() &&
                      request.resource.data.createdAt == request.time; // Ensure createdAt is server time on create

      allow update: if isAttendanceOwner() && // Original marker
                      request.resource.data.markedByTeacherId == resource.data.markedByTeacherId && // Marker cannot change
                      request.resource.data.studentId == resource.data.studentId && // Student cannot change
                      entryId.startsWith(resource.data.studentId + '_') &&
                      isValidAttendanceData();

      allow delete: if isAttendanceOwner();
    }

    // --- Timetable Entries (/timetableEntries/{entryId}) ---
    // entryId is "{teacherId}_{dayOfWeek}"
    match /timetableEntries/{entryId} {
      function isTimetableOwnerForResource() {
        return isAuthenticated() &&
               resource.data.keys().has('teacherId') &&
               resource.data.teacherId == request.auth.uid &&
               entryId.startsWith(request.auth.uid + '_');
      }
      function isTimetableOwnerForRequest() {
        return isAuthenticated() &&
               request.resource.data.keys().has('teacherId') &&
               request.resource.data.teacherId == request.auth.uid &&
               entryId.startsWith(request.auth.uid + '_');
      }
      function isValidTimetableData() {
        return request.resource.data.dayOfWeek is string &&
               request.resource.data.periods is list &&
               // Basic check for periods; more detailed validation for period structure is complex for rules
               request.resource.data.updatedAt == request.time;
      }

      allow read: if isTimetableOwnerForResource() || isAdmin();

      allow create: if isTimetableOwnerForRequest() &&
                      request.resource.data.createdAt == request.time &&
                      isValidTimetableData();

      allow update: if isTimetableOwnerForResource() && // Must be owner of existing doc
                      isTimetableOwnerForRequest() &&     // Must be owner for new data
                      request.resource.data.dayOfWeek == resource.data.dayOfWeek && // Day of week (part of ID) cannot change
                      isValidTimetableData();

      allow delete: if isTimetableOwnerForResource();
    }

    // --- Behavior Incidents (/behaviorIncidents/{incidentId}) ---
    match /behaviorIncidents/{incidentId} {
      function isBehaviorIncidentOwnerForResource() {
        return isAuthenticated() && resource.data.keys().has('teacherId') && resource.data.teacherId == request.auth.uid;
      }
       function isBehaviorIncidentOwnerForRequest() {
        return isAuthenticated() && request.resource.data.keys().has('teacherId') && request.resource.data.teacherId == request.auth.uid;
      }
      function isValidBehaviorIncidentData() {
        return request.resource.data.studentId is string &&
               request.resource.data.studentName is string &&
               request.resource.data.classId is string &&
               request.resource.data.type is string &&
               request.resource.data.description is string &&
               request.resource.data.date is timestamp &&
               (!request.resource.data.keys().has('updatedAt') || request.resource.data.updatedAt == request.time); // Ensure updatedAt if present
      }

      allow read: if isAuthenticated() && (isAdmin() || isBehaviorIncidentOwnerForResource());
      // Students would query for their studentId; client needs to handle this.

      allow create: if isBehaviorIncidentOwnerForRequest() &&
                      request.resource.data.createdAt == request.time &&
                      isValidBehaviorIncidentData();

      allow update: if isBehaviorIncidentOwnerForResource() && // Owner of existing
                      isBehaviorIncidentOwnerForRequest() &&    // Owner of new data
                      request.resource.data.studentId == resource.data.studentId && // Student cannot change
                      isValidBehaviorIncidentData();

      allow delete: if isBehaviorIncidentOwnerForResource();
    }

    // --- Assignments (/assignments/{assignmentId}) ---
    match /assignments/{assignmentId} {
      function isAssignmentOwnerForResource() {
        return isAuthenticated() && resource.data.keys().has('teacherId') && resource.data.teacherId == request.auth.uid;
      }
       function isAssignmentOwnerForRequest() {
        return isAuthenticated() && request.resource.data.keys().has('teacherId') && request.resource.data.teacherId == request.auth.uid;
      }
      function isValidAssignmentData() {
        return request.resource.data.classId is string &&
               request.resource.data.title is string &&
               request.resource.data.description is string &&
               request.resource.data.dueDate is timestamp &&
               (!request.resource.data.keys().has('updatedAt') || request.resource.data.updatedAt == request.time); // Ensure updatedAt if present
      }

      // Teachers can read assignments they created. Admins can read all.
      // Students query for their classId - handled by client.
      allow read: if isAuthenticated() && (isAdmin() || isAssignmentOwnerForResource());

      allow create: if isAssignmentOwnerForRequest() &&
                      request.resource.data.createdAt == request.time &&
                      isValidAssignmentData();

      allow update: if isAssignmentOwnerForResource() && // Owner of existing
                      isAssignmentOwnerForRequest() &&    // Owner of new data
                      isValidAssignmentData();

      allow delete: if isAssignmentOwnerForResource();
    }

    // Default deny all other paths not explicitly matched
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

    