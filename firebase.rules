
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin (placeholder)
    // In a real app, this might check custom claims or an admin collection
    function isAdmin() {
      // return request.auth.token.admin == true; // Example: if using custom claims
      // For now, allow if authenticated (simplistic, secure properly for production)
      return request.auth != null;
    }

    // Helper function to check if a user is a registered teacher
    function isTeacher() {
      return request.auth != null && exists(/databases/$(database)/documents/teachers/$(request.auth.uid));
    }

    // Helper function to check if the UID matches the document ID
    function isOwner(docId) {
      return request.auth != null && request.auth.uid == docId;
    }
    
    // Helper function to check if the UID matches a field in the document
    function isFieldOwner(fieldName) {
      return request.auth != null && request.auth.uid == resource.data[fieldName];
    }
     function isRequestFieldOwner(fieldName) { // For create operations
      return request.auth != null && request.auth.uid == request.resource.data[fieldName];
    }


    // Students Collection
    // Student ID (document ID) should be used for non-auth access on student portal
    match /students/{studentId} {
      allow read: if true; // Publicly readable for student portal using ID, or admin/teacher access
      allow create: if isAdmin(); // Only admins can register new students
      allow update: if isAdmin(); // Only admins can update student details
      allow delete: if isAdmin(); // Only admins can delete students
    }

    // Teachers Collection
    // Teachers manage their own profiles after admin registration
    match /teachers/{teacherId} {
      allow read: if true; // Teacher profiles might be readable by admins or other relevant users
      allow create: if isAdmin(); // Admins register teachers initially
      allow update: if isOwner(teacherId) || isAdmin(); // Teachers can update their own profile, admins can too
      allow delete: if isAdmin(); // Only admins can delete teacher accounts (consider implications for auth user)
    }

    // Payments Collection
    match /payments/{paymentId} {
      allow read: if isAdmin() || (isTeacher() && exists(/databases/$(database)/documents/students/$(resource.data.studentId))) || (request.auth == null && request.resource.data.studentId == "STUDENT_PORTAL_ID_PLACEHOLDER"); // Admins can read all. Teachers can read for students. Student portal (non-auth) might need specific checks.
      // The student portal part of the read rule needs careful consideration for security
      // For now, it uses a placeholder. A better approach might be a Callable Function for students to fetch their payments.
      // Or, if student ID is known and safe to expose in rules (e.g., from a client-side stored ID after "login")
      // allow read: if isAdmin() || (isTeacher() && ...) || (request.auth.uid == resource.data.studentId); // If students had auth
      allow create: if isAdmin(); // Only admins record payments
      allow update: if isAdmin(); // Admins can correct payments
      allow delete: if isAdmin(); // Admins can delete payments
    }

    // Announcements - Migrating this to Firestore from localStorage
    // Example placeholder rules - adjust based on actual needs
    match /announcements/{announcementId} {
      allow read: if true; // All authenticated users can read announcements
      allow create: if isAdmin(); // Only admins can create announcements
      allow update: if isAdmin(); // Only admins can update announcements
      allow delete: if isAdmin(); // Only admins can delete announcements
    }
    
    // School Fee Structure - Migrating this to Firestore from localStorage
    // Example placeholder rules
    match /feeStructure/{feeItemId} {
        allow read: if true; // All authenticated users can see fee structure
        allow write: if isAdmin(); // Only admins can manage fee structure
    }

    // App Settings (e.g., academic year, school name)
    match /appSettings/{settingId} {
      allow read: if true; // Settings are generally public or readable by authenticated users
      allow write: if isAdmin(); // Only admins can change app-wide settings
    }

    // Attendance Entries
    match /attendanceEntries/{entryId} {
      // entryId might be studentId_YYYY-MM-DD
      allow read: if isAdmin() || 
                     (isTeacher() && resource.data.markedByTeacherId == request.auth.uid) || // Teacher can read their own marked entries
                     (isTeacher() && exists(/databases/$(database)/documents/students/$(resource.data.studentId)) && get(/databases/$(database)/documents/teachers/$(request.auth.uid)).data.assignedClasses.hasAny(get(/databases/$(database)/documents/students/$(resource.data.studentId)).data.gradeLevel) ) || // Teacher can read entries for students in their assigned classes
                     (request.auth == null && resource.data.studentId == "STUDENT_PORTAL_ID_PLACEHOLDER_FOR_STUDENT_READ"); // Student portal access via studentId (needs secure implementation)
                     // If students had auth: (request.auth.uid == resource.data.studentId);
      allow create, update: if isTeacher() && isRequestFieldOwner('markedByTeacherId'); // Teacher can create/update if they are the marker
      allow delete: if isAdmin() || (isTeacher() && isFieldOwner('markedByTeacherId')); // Admin or owning teacher can delete
    }

    // Assignments
    match /assignments/{assignmentId} {
      allow read: if isAdmin() || isTeacher() || (request.auth == null && resource.data.classId == "STUDENT_PORTAL_CLASS_ID_PLACEHOLDER"); // Admins, Teachers. Student portal access needs careful rules.
                      // If students had auth: exists(/databases/$(database)/documents/students/$(request.auth.uid)) && get(/databases/$(database)/documents/students/$(request.auth.uid)).data.gradeLevel == resource.data.classId
      allow create: if isTeacher() && isRequestFieldOwner('teacherId');
      allow update, delete: if isTeacher() && isFieldOwner('teacherId');
    }

    // Behavior Incidents
    match /behaviorIncidents/{incidentId} {
      allow read: if isAdmin() || 
                     isTeacher() || // Allow teachers to read all incidents (can be refined to their students)
                     (request.auth == null && resource.data.studentId == "STUDENT_PORTAL_ID_PLACEHOLDER_FOR_STUDENT_READ"); // Student portal access
      allow create: if isTeacher() && isRequestFieldOwner('teacherId');
      allow update, delete: if isTeacher() && isFieldOwner('teacherId');
    }

    // Timetable Entries
    match /timetableEntries/{entryId} {
      allow read: if isTeacher() && isFieldOwner('teacherId'); // Teacher can read their own entries
      allow create: if isTeacher() && isRequestFieldOwner('teacherId'); // Teacher can create for themselves
      allow update, delete: if isTeacher() && isFieldOwner('teacherId'); // Teacher can update/delete their own entries
    }

  }
}
